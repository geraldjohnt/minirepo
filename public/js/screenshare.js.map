{"version":3,"sources":["screenshare.js"],"names":[],"mappingsfile":"screenshare.js","sourcesContent":["/**\r\n * SkyWay-Screenshare-Library - Screenshare Library for SkyWay\r\n * @version v1.1.0\r\n * @author NTT Communications(skyway@ntt.com)\r\n * @link https://github.com/nttcom/SkyWay-ScreenShare\r\n * @license MIT License\r\n */\r\n/// <reference path=\"typings/tsd.d.ts\" />\r\n\r\n//modified screenshare\r\nvar SkyWay;\r\n(function (SkyWay) {\r\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n\r\n    var ScreenShare = (function () {\r\n        function ScreenShare(options) {\r\n            if (typeof options === \"undefined\") { options = null; }\r\n            this._debug = false;\r\n            if (options !== null && 'debug' in options)\r\n                this._debug = options.debug;\r\n        }\r\n        ScreenShare.prototype.startScreenShare = function (param, success, error, onEndedEvent) {\r\n            var _this = this;\r\n            if (typeof onEndedEvent === \"undefined\") { onEndedEvent = null; }\r\n            if (!!navigator.mozGetUserMedia) {\r\n                // for FF\r\n                var _paramFirefox = {\r\n                    video: {\r\n                        mozMediaSource: 'window',\r\n                        mediaSource: 'window'\r\n                    },\r\n                    audio: true\r\n                };\r\n\r\n                if (isFinite(param.Width))\r\n                    _paramFirefox.video.width = { min: param.Width, max: param.Width };\r\n                if (isFinite(param.Height))\r\n                    _paramFirefox.video.height = { min: param.Height, max: param.Height };\r\n                if (isFinite(param.FrameRate))\r\n                    _paramFirefox.video.frameRate = { min: param.FrameRate, max: param.FrameRate };\r\n\r\n                this.logger(\"Parameter of getUserMedia : \" + JSON.stringify(_paramFirefox));\r\n\r\n                navigator.mozGetUserMedia(_paramFirefox, function (stream) {\r\n                    success(stream);\r\n                }, function (err) {\r\n                    _this.logger(\"Error message of getUserMedia : \" + JSON.stringify(err));\r\n                    error(err);\r\n                });\r\n            } else if (!!navigator.webkitGetUserMedia) {\r\n                // for Chrome\r\n                var _paramChrome = {\r\n                    mandatory: {\r\n                        chromeMediaSource: 'desktop',\r\n                        chromeMediaSourceId: ''\r\n                    },\r\n                    optional: [{\r\n                            googTemporalLayeredScreencast: true\r\n                        }]\r\n                };\r\n\r\n                if (isFinite(param.Width)) {\r\n                    _paramChrome.mandatory.maxWidth = param.Width;\r\n                    _paramChrome.mandatory.minWidth = param.Width;\r\n                }\r\n                ;\r\n                if (isFinite(param.Height)) {\r\n                    _paramChrome.mandatory.maxHeight = param.Height;\r\n                    _paramChrome.mandatory.minHeight = param.Height;\r\n                }\r\n                ;\r\n                if (isFinite(param.FrameRate)) {\r\n                    _paramChrome.mandatory.maxFrameRate = param.FrameRate;\r\n                    _paramChrome.mandatory.minFrameRate = param.FrameRate;\r\n                }\r\n                ;\r\n\r\n                window.addEventListener('message', function (event) {\r\n                    _this.logger(\"Received \" + '\"' + event.data.type + '\"' + \" message from Extension.\");\r\n                    if (event.data.type != 'gotStreamId') {\r\n                        return;\r\n                    }\r\n                    _paramChrome.mandatory.chromeMediaSourceId = event.data.streamid;\r\n                    _this.logger(\"Parameter of getUserMedia : \" + JSON.stringify(_paramChrome));\r\n                    navigator.getUserMedia({\r\n                        audio: true,\r\n                        video: _paramChrome\r\n                    }, function (stream) {\r\n                        _this.logger(\"Got a stream for screen share\");\r\n                        var streamTrack = stream.getVideoTracks();\r\n                        streamTrack[0].onended = function (event) {\r\n                            _this.logger(\"Stream ended event fired : \" + JSON.stringify(event));\r\n                            if (typeof (onEndedEvent) !== \"undefined\" && onEndedEvent !== null)\r\n                                onEndedEvent();\r\n                        };\r\n                        success(stream);\r\n                    }, function (err) {\r\n                        _this.logger(\"Error message of getUserMedia : \" + JSON.stringify(err));\r\n                        error(err);\r\n                    });\r\n                });\r\n\r\n                window.postMessage({ type: \"getStreamId\" }, \"*\");\r\n            } else if (window.AdapterJS && AdapterJS.WebRTCPlugin && AdapterJS.WebRTCPlugin.isPluginInstalled) {\r\n                // would be fine since no methods\r\n                var _paramIE = {\r\n                    video: {\r\n                        optional: [{\r\n                                sourceId: AdapterJS.WebRTCPlugin.plugin.screensharingKey || 'Screensharing'\r\n                            }]\r\n                    },\r\n                    audio: true\r\n                };\r\n\r\n                // wait for plugin to be ready\r\n                AdapterJS.WebRTCPlugin.callWhenPluginReady(function () {\r\n                    // check if screensharing feature is available\r\n                    if (!!AdapterJS.WebRTCPlugin.plugin.HasScreensharingFeature && !!AdapterJS.WebRTCPlugin.plugin.isScreensharingAvailable) {\r\n                        navigator.getUserMedia(_paramIE, function (stream) {\r\n                            _this.logger(\"Got a stream for screen share\");\r\n                            var streamTrack = stream.getVideoTracks();\r\n                            streamTrack[0].onended = function (event) {\r\n                                _this.logger(\"Stream ended event fired : \" + JSON.stringify(event));\r\n                                if (typeof (onEndedEvent) !== \"undefined\")\r\n                                    onEndedEvent();\r\n                            };\r\n                            success(stream);\r\n                        }, function (err) {\r\n                            _this.logger(\"Error message of getUserMedia : \" + JSON.stringify(err));\r\n                            error(err);\r\n                        });\r\n                    } else {\r\n                        throw new Error('Your WebRTC plugin does not support screensharing');\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        ScreenShare.prototype.stopScreenShare = function () {\r\n            // todo : It plans to implement\r\n            return false;\r\n        };\r\n\r\n        ScreenShare.prototype.isEnabledExtension = function () {\r\n            if (typeof (window.ScreenShareExtentionExists) === 'boolean' || (window.AdapterJS && AdapterJS.WebRTCPlugin && AdapterJS.WebRTCPlugin.isPluginInstalled)) {\r\n                this.logger('ScreenShare Extension available');\r\n                return true;\r\n            } else {\r\n                this.logger('ScreenShare Extension not available');\r\n                return false;\r\n            }\r\n        };\r\n\r\n        ScreenShare.prototype.logger = function (message) {\r\n            if (this._debug) {\r\n                //  (\"SkyWay-ScreenShare: \" + message);\r\n            }\r\n        };\r\n        return ScreenShare;\r\n    })();\r\n    SkyWay.ScreenShare = ScreenShare;\r\n})(SkyWay || (SkyWay = {}));"]}