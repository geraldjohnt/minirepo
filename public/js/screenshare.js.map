{"version":3,"sources":["screenshare.js"],"names":[],"mappingsfile":"screenshare.js","sourcesContent":["/**\n * SkyWay-Screenshare-Library - Screenshare Library for SkyWay\n * @version v1.1.0\n * @author NTT Communications(skyway@ntt.com)\n * @link https://github.com/nttcom/SkyWay-ScreenShare\n * @license MIT License\n */\n/// <reference path=\"typings/tsd.d.ts\" />\n\n//modified screenshare\nvar SkyWay;\n(function (SkyWay) {\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n    var ScreenShare = (function () {\n        function ScreenShare(options) {\n            if (typeof options === \"undefined\") { options = null; }\n            this._debug = false;\n            if (options !== null && 'debug' in options)\n                this._debug = options.debug;\n        }\n        ScreenShare.prototype.startScreenShare = function (param, success, error, onEndedEvent) {\n            var _this = this;\n            if (typeof onEndedEvent === \"undefined\") { onEndedEvent = null; }\n            if (!!navigator.mozGetUserMedia) {\n                // for FF\n                var _paramFirefox = {\n                    video: {\n                        mozMediaSource: 'window',\n                        mediaSource: 'window'\n                    },\n                    audio: true\n                };\n\n                if (isFinite(param.Width))\n                    _paramFirefox.video.width = { min: param.Width, max: param.Width };\n                if (isFinite(param.Height))\n                    _paramFirefox.video.height = { min: param.Height, max: param.Height };\n                if (isFinite(param.FrameRate))\n                    _paramFirefox.video.frameRate = { min: param.FrameRate, max: param.FrameRate };\n\n                this.logger(\"Parameter of getUserMedia : \" + JSON.stringify(_paramFirefox));\n\n                navigator.mozGetUserMedia(_paramFirefox, function (stream) {\n                    success(stream);\n                }, function (err) {\n                    _this.logger(\"Error message of getUserMedia : \" + JSON.stringify(err));\n                    error(err);\n                });\n            } else if (!!navigator.webkitGetUserMedia) {\n                // for Chrome\n                var _paramChrome = {\n                    mandatory: {\n                        chromeMediaSource: 'desktop',\n                        chromeMediaSourceId: ''\n                    },\n                    optional: [{\n                            googTemporalLayeredScreencast: true\n                        }]\n                };\n\n                if (isFinite(param.Width)) {\n                    _paramChrome.mandatory.maxWidth = param.Width;\n                    _paramChrome.mandatory.minWidth = param.Width;\n                }\n                ;\n                if (isFinite(param.Height)) {\n                    _paramChrome.mandatory.maxHeight = param.Height;\n                    _paramChrome.mandatory.minHeight = param.Height;\n                }\n                ;\n                if (isFinite(param.FrameRate)) {\n                    _paramChrome.mandatory.maxFrameRate = param.FrameRate;\n                    _paramChrome.mandatory.minFrameRate = param.FrameRate;\n                }\n                ;\n\n                window.addEventListener('message', function (event) {\n                    _this.logger(\"Received \" + '\"' + event.data.type + '\"' + \" message from Extension.\");\n                    if (event.data.type != 'gotStreamId') {\n                        return;\n                    }\n                    _paramChrome.mandatory.chromeMediaSourceId = event.data.streamid;\n                    _this.logger(\"Parameter of getUserMedia : \" + JSON.stringify(_paramChrome));\n                    navigator.getUserMedia({\n                        audio: true,\n                        video: _paramChrome\n                    }, function (stream) {\n                        _this.logger(\"Got a stream for screen share\");\n                        var streamTrack = stream.getVideoTracks();\n                        streamTrack[0].onended = function (event) {\n                            _this.logger(\"Stream ended event fired : \" + JSON.stringify(event));\n                            if (typeof (onEndedEvent) !== \"undefined\" && onEndedEvent !== null)\n                                onEndedEvent();\n                        };\n                        success(stream);\n                    }, function (err) {\n                        _this.logger(\"Error message of getUserMedia : \" + JSON.stringify(err));\n                        error(err);\n                    });\n                });\n\n                window.postMessage({ type: \"getStreamId\" }, \"*\");\n            } else if (window.AdapterJS && AdapterJS.WebRTCPlugin && AdapterJS.WebRTCPlugin.isPluginInstalled) {\n                // would be fine since no methods\n                var _paramIE = {\n                    video: {\n                        optional: [{\n                                sourceId: AdapterJS.WebRTCPlugin.plugin.screensharingKey || 'Screensharing'\n                            }]\n                    },\n                    audio: true\n                };\n\n                // wait for plugin to be ready\n                AdapterJS.WebRTCPlugin.callWhenPluginReady(function () {\n                    // check if screensharing feature is available\n                    if (!!AdapterJS.WebRTCPlugin.plugin.HasScreensharingFeature && !!AdapterJS.WebRTCPlugin.plugin.isScreensharingAvailable) {\n                        navigator.getUserMedia(_paramIE, function (stream) {\n                            _this.logger(\"Got a stream for screen share\");\n                            var streamTrack = stream.getVideoTracks();\n                            streamTrack[0].onended = function (event) {\n                                _this.logger(\"Stream ended event fired : \" + JSON.stringify(event));\n                                if (typeof (onEndedEvent) !== \"undefined\")\n                                    onEndedEvent();\n                            };\n                            success(stream);\n                        }, function (err) {\n                            _this.logger(\"Error message of getUserMedia : \" + JSON.stringify(err));\n                            error(err);\n                        });\n                    } else {\n                        throw new Error('Your WebRTC plugin does not support screensharing');\n                    }\n                });\n            }\n        };\n\n        ScreenShare.prototype.stopScreenShare = function () {\n            // todo : It plans to implement\n            return false;\n        };\n\n        ScreenShare.prototype.isEnabledExtension = function () {\n            if (typeof (window.ScreenShareExtentionExists) === 'boolean' || (window.AdapterJS && AdapterJS.WebRTCPlugin && AdapterJS.WebRTCPlugin.isPluginInstalled)) {\n                this.logger('ScreenShare Extension available');\n                return true;\n            } else {\n                this.logger('ScreenShare Extension not available');\n                return false;\n            }\n        };\n\n        ScreenShare.prototype.logger = function (message) {\n            if (this._debug) {\n                //  (\"SkyWay-ScreenShare: \" + message);\n            }\n        };\n        return ScreenShare;\n    })();\n    SkyWay.ScreenShare = ScreenShare;\n})(SkyWay || (SkyWay = {}));"]}